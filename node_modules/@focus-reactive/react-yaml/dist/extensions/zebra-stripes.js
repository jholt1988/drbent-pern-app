"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zebraStripes = zebraStripes;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _view = require("@codemirror/view");

var _state = require("@codemirror/state");

var _rangeset = require("@codemirror/rangeset");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var baseTheme = _view.EditorView.baseTheme({
  '&light .cm-zebraStripe': {
    borderTop: '1px solid #8080804f',
    borderBottom: '1px solid #8080804f'
  },
  '&dark .cm-zebraStripe': {
    borderTop: '1px solid #8080804f',
    borderBottom: '1px solid #8080804f'
  }
});

var stepSize = _state.Facet.define({
  combine: function combine(val) {
    return val[0];
  }
});

var stripe = _view.Decoration.line({
  attributes: {
    "class": 'cm-zebraStripe'
  }
});

function stripeDeco(view) {
  var step = view.state.facet(stepSize);
  var builder = new _rangeset.RangeSetBuilder();

  var _iterator = _createForOfIteratorHelper(view.visibleRanges),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _step.value,
          from = _step$value.from,
          to = _step$value.to;

      for (var pos = from; pos <= to;) {
        var line = view.state.doc.lineAt(pos);
        if (line.number % step === 0) builder.add(line.from, line.from, stripe);
        pos = line.to + 1;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return builder.finish();
}

var showStripes = _view.ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class2(view) {
    (0, _classCallCheck2["default"])(this, _class2);
    (0, _defineProperty2["default"])(this, "decorations", _view.DecorationSet);
    this.decorations = stripeDeco(view);
  }

  (0, _createClass2["default"])(_class2, [{
    key: "update",
    value: function update(_update) {
      if (_update.docChanged || _update.viewportChanged) this.decorations = stripeDeco(_update.view);
    }
  }]);
  return _class2;
}(), {
  decorations: function decorations(v) {
    return v.decorations;
  }
});

function zebraStripes() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  window.stepSize = stepSize;
  return [baseTheme, stepSize.of((options === null || options === void 0 ? void 0 : options.step) || 2), showStripes];
}